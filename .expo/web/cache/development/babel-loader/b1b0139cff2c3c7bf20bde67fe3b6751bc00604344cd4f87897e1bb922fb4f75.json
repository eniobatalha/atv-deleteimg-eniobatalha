{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getStorage, ref, uploadBytes } from \"firebase/storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ImagePickerExample = function ImagePickerExample() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    imageUri = _useState2[0],\n    setImageUri = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    uploading = _useState4[0],\n    setUploading = _useState4[1];\n  var firebaseConfig = {\n    apiKey: \"AIzaSyA3Kb9CCLDu4xfI9_rmCDLwkEPPTsOFL4c\",\n    authDomain: \"aula-mobile-76f22.firebaseapp.com\",\n    projectId: \"aula-mobile-76f22\",\n    storageBucket: \"aula-mobile-76f22.appspot.com\",\n    messagingSenderId: \"588274377803\",\n    appId: \"1:588274377803:web:74f45262068dddf72b99ce\",\n    measurementId: \"G-GNVSBPGQVC\"\n  };\n  var app = initializeApp(firebaseConfig);\n  var analytics = getAnalytics(app);\n  var pickImage = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var result = yield ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.All,\n        allowsEditing: true,\n        aspect: [4, 3],\n        quality: 1\n      });\n      if (!result.cancelled) {\n        setImageUri(result.uri);\n      }\n    });\n    return function pickImage() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var uploadImage = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var blob = yield new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.onload = function () {\n          resolve(xhr.response);\n        };\n        xhr.onerror = function () {\n          reject(new TypeError('Network request failed'));\n        };\n        xhr.responseType = 'blob';\n        xhr.open('GET', image, true);\n        xhr.send(null);\n      });\n      var ref = firebase.storage().ref().child(`Pictures/Image1`);\n      var snapshot = ref.put(blob);\n      snapshot.on(firebase.storage.TaskEvent.STATE_CHANGED, function () {\n        setUploading(true);\n      }, function (error) {\n        setUploading(false);\n        console.log(error);\n        blob.close();\n        return;\n      }, function () {\n        snapshot.snapshot.ref.getDownloadURL().then(function (url) {\n          setUploading(false);\n          console.log(\"Download URL: \", url);\n          setImage(url);\n          blob.close();\n          return url;\n        });\n      });\n    });\n    return function uploadImage() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    children: [_jsx(Button, {\n      title: \"Escolher Imagem\",\n      onPress: pickImage\n    }), imageUri && _jsx(Image, {\n      source: {\n        uri: imageUri\n      },\n      style: {\n        width: 200,\n        height: 200,\n        marginVertical: 20\n      }\n    }), uploading ? _jsx(ActivityIndicator, {\n      size: \"large\",\n      color: \"#0000ff\"\n    }) : _jsx(Button, {\n      title: \"Enviar Imagem\",\n      onPress: uploadImage,\n      disabled: !imageUri\n    })]\n  });\n};\nexport default ImagePickerExample;","map":{"version":3,"names":["React","useState","View","Text","Button","Image","ImagePicker","initializeApp","getAnalytics","getStorage","ref","uploadBytes","jsx","_jsx","jsxs","_jsxs","ImagePickerExample","_useState","_useState2","_slicedToArray","imageUri","setImageUri","_useState3","_useState4","uploading","setUploading","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","pickImage","_ref","_asyncToGenerator","result","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","cancelled","uri","apply","arguments","uploadImage","_ref2","blob","Promise","resolve","reject","xhr","XMLHttpRequest","onload","response","onerror","TypeError","responseType","open","image","send","firebase","storage","child","snapshot","put","on","TaskEvent","STATE_CHANGED","error","console","log","close","getDownloadURL","then","url","setImage","style","flex","alignItems","justifyContent","children","title","onPress","source","width","height","marginVertical","ActivityIndicator","size","color","disabled"],"sources":["/Users/nilsonjunior/aulamobile/my-app/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { View, Text, StyleSheet, Button, Image, Alert, ActivityIndicator } from 'react-native';\n// import * as ImagePicker from 'react-native-image-picker';\n// import { StatusBar } from 'expo-status-bar';\n// import { initializeApp } from \"firebase/app\";\n// import { getAnalytics } from \"firebase/analytics\";\n// import { getStorage, ref } from \"firebase/storage\";\n\n// export default function App() {\n\n//   const firebaseConfig = {\n//     apiKey: \"AIzaSyA3Kb9CCLDu4xfI9_rmCDLwkEPPTsOFL4c\",\n//     authDomain: \"aula-mobile-76f22.firebaseapp.com\",\n//     projectId: \"aula-mobile-76f22\",\n//     storageBucket: \"aula-mobile-76f22.appspot.com\",\n//     messagingSenderId: \"588274377803\",\n//     appId: \"1:588274377803:web:74f45262068dddf72b99ce\",\n//     measurementId: \"G-GNVSBPGQVC\"\n//   };\n\n//   // Initialize Firebase\n//   const app = initializeApp(firebaseConfig);\n//   const analytics = getAnalytics(app);\n\n//   // Get a reference to the storage service, which is used to create references in your storage bucket\n//   const storage = getStorage();\n\n//   // Create a storage reference from our storage service\n//   const storageRef = ref(storage);\n\n//   const [imageUri, setImageUri] = useState(null);\n//   const [uploading, setUploading] = useState(false);\n\n//   const pickImage = () => {\n//     ImagePicker.launchImageLibrary({}, (response) => {\n//       if (response.uri) {\n//         setImageUri(response.uri);\n//       }\n//     });\n//   };\n\n//   const uploadImage = async () => {\n//     if (!imageUri) {\n//       Alert.alert('Selecione uma imagem antes de enviar.');\n//       return;\n//     }\n\n//     setUploading(true);\n//     const filename = imageUri.substring(imageUri.lastIndexOf('/') + 1);\n\n//     try {\n//       const reference = storage().ref(`images/${filename}`);\n//       await reference.putFile(imageUri);\n//       const downloadURL = await reference.getDownloadURL();\n//       Alert.alert('Sucesso', 'Imagem enviada com sucesso.');\n//       setImageUri(null);\n//       setUploading(false);\n//       console.log('URL de download:', downloadURL);\n//     } catch (error) {\n//       console.error('Erro ao enviar imagem:', error);\n//       Alert.alert('Erro', 'Houve um erro ao enviar a imagem.');\n//       setUploading(false);\n//     }\n//   };\n\n//   return (\n//     <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n//       <Button title=\"Escolher Imagem\" onPress={pickImage} />\n//       {imageUri && <Image source={{ uri: imageUri }} style={{ width: 200, height: 200, marginVertical: 20 }} />}\n//       {uploading ? (\n//         <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n//       ) : (\n//         <Button title=\"Enviar Imagem\" onPress={uploadImage} disabled={!imageUri} />\n//       )}\n//     </View>\n//   );\n// }\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     backgroundColor: '#fff',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//   },\n// });\n\n\n\nimport React, { useState } from 'react';\nimport { View, Text, Button, Image } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getStorage, ref, uploadBytes} from \"firebase/storage\";\n\nconst ImagePickerExample = () => {\n  const [imageUri, setImageUri] = useState(null);\n  const [uploading, setUploading] = useState(false);\n\n  const firebaseConfig = {\n    apiKey: \"AIzaSyA3Kb9CCLDu4xfI9_rmCDLwkEPPTsOFL4c\",\n    authDomain: \"aula-mobile-76f22.firebaseapp.com\",\n    projectId: \"aula-mobile-76f22\",\n    storageBucket: \"aula-mobile-76f22.appspot.com\",\n    messagingSenderId: \"588274377803\",\n    appId: \"1:588274377803:web:74f45262068dddf72b99ce\",\n    measurementId: \"G-GNVSBPGQVC\"\n  };\n\n  // Initialize Firebase\n  const app = initializeApp(firebaseConfig);\n  const analytics = getAnalytics(app);\n\n\n\n\n  const pickImage = async () => {\n    const result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    if (!result.cancelled) {\n      setImageUri(result.uri);\n    }\n  };\n\n  const uploadImage = async () => {\n    const blob = await new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.onload = function() {\n        resolve(xhr.response);\n      };\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n      xhr.responseType = 'blob';\n      xhr.open('GET', image, true);\n      xhr.send(null);\n    })\n    const ref = firebase.storage().ref().child(`Pictures/Image1`)\n    const snapshot = ref.put(blob)\n    snapshot.on(firebase.storage.TaskEvent.STATE_CHANGED,\n      ()=>{\n        setUploading(true)\n      },\n      (error) => {\n        setUploading(false)\n        console.log(error)\n        blob.close()\n        return \n      },\n      () => {\n        snapshot.snapshot.ref.getDownloadURL().then((url) => {\n          setUploading(false)\n          console.log(\"Download URL: \", url)\n          setImage(url)\n          blob.close()\n          return url\n        })\n      }\n      )\n  }\n\n   \n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n  \n     \n      <Button title=\"Escolher Imagem\" onPress={pickImage} />\n       {imageUri && <Image source={{ uri: imageUri }} style={{ width: 200, height: 200, marginVertical: 20 }} />}\n       {uploading ? (\n         <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n       ) : (\n         <Button title=\"Enviar Imagem\" onPress={uploadImage} disabled={!imageUri} />\n      )}\n    </View>\n  );\n};\n\nexport default ImagePickerExample;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}